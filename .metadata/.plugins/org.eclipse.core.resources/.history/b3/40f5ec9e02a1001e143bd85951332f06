

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

scan with {:

:}


terminal PROG, IDENT, LSQUIGLY, RSQUIGLY, SEMI, LBRACE, RBRACEf, PRINT, ASSIGN, RETURN, NUMBER, PLUS;

nonterminal Program, VarDeclListm, MethodDeclList, VarDecl, Type, MethodDecl;
nonterminal FormPars, StatementList FormalParamList, FormalParamDecl, Statement;
nonterminal; Designator, Expr, Term, Addop, Factor, ActualPars, ActualParamList;


Program ::= (Program) PROG IDENT VarDeclList LSQUIGLY MethodDeclList RSQUIGLY;

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
			|
			(NoVarDecl)/* epsilon */
			;
VarDecl ::= (VarDecl) Type:varType IDENT:varName SEMI;

Type ::= (Type) IDENT:typeName;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				| 
				(NoMethodDecl) /*epsilon*/
				;
MethodDecl ::= (MethotDecl) Type:retType IDENT:methodName LBRACE FormPars RBRACE VarDeclList LSQUIGLY StatementList RSQUIGLY;

FormPars ::= (FormParams) FormalParamList
		|
		(NoFormParam) /*epsilon*/
		;
		
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				;
StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) 
				;
Statement ::= (Assigment) Designator:dest ASSING Expr:e SEMI
			|
			(PrintStmt) PRINT LBRACE Expr RPAREN SEMI
			|
			(Return) RETURN Expr SEMI
			|
			(NoReturn) RETURN SEMI;
			
Expr ::= (AddExpresion) Expr:te Addor Term:t
	|
	(TermExpr) Term:t;
	
Term ::=(Factor)Factor:t;

Factor ::= (Const) NUMBER
		|
		(Var) Designator
		|
		(FuncCall) Designator LBRACE ActualPars RPAREN
		;
ActualPars ::= (Actuals) ActualParamList
			|
			(NoActuals)/*epsilon*/
			;
ActualParamList ::=(ActualParams) ActualParamList COMMA Expr;
				|
				(ActualParam) Expr
				;
				
				
Designator ::= (Designator) IDENT:name;

Addop ::= (Addop) PLUS;
		